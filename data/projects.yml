- name: Speed Typing
  description: Speed Typing practice for Coders
  link: https://speedtyping.borjessons.nu/
  image: /images/speedtyping.jpg
  long_description: I wanted to create an app similar to 10FastFingers but for coders, and this was the result. I used only functional components, and global state management was achieved with with pure react (react context).
  technologies: React, JavaScript, HTML/CSS, Java, AWS
  github_link:
    - https://github.com/Rinbo/speed-typing
    - https://github.com/Rinbo/speed-typing-backend
- name: Borjessons Grapher
  description: Create your custom graphs and share them
  link: https://grapher.borjessons.nu/
  image: /images/depolarize.jpg
  long_description: Using react and ChartJS to dynamically create charts in the browser that can be easily shared my mailing a permanent link to your creation. 
  technologies: React, JavaScript, HTML/CSS, Java, AWS
  github_link: 
    - https://github.com/Rinbo/grapher
    - https://github.com/Rinbo/g-end
- name: Neural Network
  description: Digit recognition in the browser
  link: https://predictor.borjessons.nu/
  image: /images/nn.jpeg
  long_description: "Note: The idea for this app was originally Jeff Delaney's. I saw it flash by in a video on Tensoflowjs, but the implementation that I have used here is entirely 
  my own. I used Matlab to build a neural network to generate parameter matrices from 60000 28x28-pixel images of handwritten digits. I then imported the matrices into a React-app, 
  in which the vector generated by the user's input (curtsy of HMTL-canvas) is downscaled and passed into a forward propagation algorithm spitting out a softmax array containing the 
  probabilities of the ten single digits being the input. I'm quite impressed that it actually worked as well as it did. I wanted the calculations to be instant, which put a limit on the number of 
  parameters in the matrices. Due to this, the accuracy on the cross-validation set is only 90% which of course is obvious when trying out the app. Naturally, there are numerous ways of optimizing this. Fun fact: 
  the most challenging part of the app for me was actually to downscale the picture from 168x168 pixels to 28x28 using javascript."
  technologies: Matlab/Octave, React, JavaScript, HTML Canvas
  github_link:
    - https://github.com/Rinbo/predict-digit/
- name: RPS-JavaScript
  description: Rock Paper Scissor
  link: https://rinbo.github.io/RPS-js/
  image: /images/rps-js.jpg
  long_description: This is a web-based rock, paper, scissor game that I made way back in the days. My son likes to play it so I'll leave it up here.
  technologies: JavaScript, HTML/CSS, Cucumber, Chai
  github_link: 
    - https://github.com/Rinbo/RPS-js
- name: Sqedule
  description: Optimized staff planning
  link: https://sqedule.herokuapp.com/
  image: /images/sqedule.png
  long_description: "A client wanted an MVP of an app that he had been planning for a while. A manager can enter his/her employees and the 
  different shifts that are relevant for that compnay. This information is then passed on to an API endpoint for calculation of an optimized schedule based on a number of parameters."
  technologies: Ruby on Rails, Javascript, Heroku, Semaphore, Cucumber, Rspec, Pivotal Tracker, Git, Github
  github_link: 
    - https://github.com/Rinbo/sqedule

